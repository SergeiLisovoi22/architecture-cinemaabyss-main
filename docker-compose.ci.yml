version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: cinemaabyss-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: cinemaabyss
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cinemaabyss-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: cinemaabyss-zookeeper
    ports:
      - "2181:2181"
    networks:
      - cinemaabyss-network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    container_name: cinemaabyss-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "movie-events:1:1,user-events:1:1,payment-events:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - cinemaabyss-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cinemaabyss-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cinemaabyss
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cinemaabyss-network

  monolith:
    image: ghcr.io/sergeilisovoi22/cinemaabyss-monolith:latest
    container_name: cinemaabyss-monolith
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      cinemaabyss-network:
        aliases:
          - monolith

  movies-service:
    image: ghcr.io/sergeilisovoi22/cinemaabyss-movies-service:latest
    container_name: cinemaabyss-movies-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      DB_CONNECTION_STRING: postgres://postgres:postgres_password@postgres:5432/cinemaabyss?sslmode=disable
    networks:
      cinemaabyss-network:
        aliases:
          - movies-service

  events-service:
    image: ghcr.io/sergeilisovoi22/events-service:latest
    container_name: cinemaabyss-events-service
    depends_on:
      - postgres
      - kafka
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      KAFKA_BROKERS: kafka:9092
      SERVER_PORT: 8082
      KAFKA_HOST: kafka:9092
      KAFKA_CONSUMER_GROUP_ID: cinemaabyss-events
      KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      KAFKA_CONSUMER_EVENT_TOPIC_NAME: events
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: events
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER: org.springframework.kafka.support.serializer.JsonDeserializer
      SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_USE_TYPE_HEADERS: "true"
      SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES: com.cinemaabyss.events_service.dto
      SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_VALUE_DEFAULT_TYPE: java.lang.Object
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      SPRING_KAFKA_PRODUCER_PROPERTIES_SPRING_JSON_ADD_TYPE_HEADERS: "true"
    networks:
      cinemaabyss-network:
        aliases:
          - events-service

  proxy-service:
    image: ghcr.io/sergeilisovoi22/cinemaabyss-proxy-service:latest
    container_name: cinemaabyss-proxy-service
    depends_on:
      - monolith
      - movies-service
      - events-service
    ports:
      - "8000:8000"
    environment:
      PORT: 8000
      MONOLITH_URL: http://monolith:8080
      MOVIES_SERVICE_URL: http://movies-service:8081
      EVENTS_SERVICE_URL: http://events-service:8082
      GRADUAL_MIGRATION: "true"
      MOVIES_MIGRATION_PERCENT: "50"
      SERVER_PORT: 8000
      PROXY_CINEMAABYSS_MAIN_URL: http://monolith:8080
      PROXY_CINEMAABYSS_MOVIES_URL: http://movies-service:8081
      PROXY_CINEMAABYSS_PROXY_ENABLED: "true"
    networks:
      cinemaabyss-network:
        aliases:
          - proxy-service

networks:
  cinemaabyss-network:
    name: cinemaabyss-network
    driver: bridge

volumes:
  postgres-data: