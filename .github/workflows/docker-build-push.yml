name: Docker Build, Push & API Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/docker-build-push.yml'
      - 'docker-compose.ci.yml'
      - 'tests/**'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  OWNER: SergeiLisovoi22
  PROXY_REPO: cinemaabyss-proxy-service
  EVENTS_REPO: events-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout main repo (architecture-cinemaabyss-main)
        uses: actions/checkout@v4

      - name: Checkout external repo (proxy-service) into src/microservices/proxy/cinemaabyss-proxy-service
        uses: actions/checkout@v4
        with:
          repository: ${{ env.OWNER }}/${{ env.PROXY_REPO }}
          ref: main          # если Dockerfile в dev — поменяй на: dev
          path: src/microservices/proxy/cinemaabyss-proxy-service

      - name: Checkout external repo (events-service) into src/microservices/events
        uses: actions/checkout@v4
        with:
          repository: ${{ env.OWNER }}/${{ env.EVENTS_REPO }}
          ref: main          # если Dockerfile в dev — поменяй на: dev
          path: src/microservices/events

      - name: Debug — ensure Dockerfiles exist
        run: |
          ls -la ./src/microservices/proxy/cinemaabyss-proxy-service || true
          ls -la ./src/microservices/events || true
          test -f ./src/microservices/proxy/cinemaabyss-proxy-service/Dockerfile || (echo "Proxy Dockerfile not found" && exit 1)
          test -f ./src/microservices/events/Dockerfile || (echo "Events Dockerfile not found" && exit 1)

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (with PAT)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GHCR_PAT }}

      # ===== PROXY =====
      - name: Meta (proxy-service)
        id: meta-proxy
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.PROXY_REPO }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build & Push (proxy-service)
        uses: docker/build-push-action@v5
        with:
          context: ./src/microservices/proxy/cinemaabyss-proxy-service
          dockerfile: Dockerfile   # если у тебя файл называется "dockerfile" — поменяй
          push: true
          tags: ${{ steps.meta-proxy.outputs.tags }}
          labels: ${{ steps.meta-proxy.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ===== EVENTS =====
      - name: Meta (events-service)
        id: meta-events
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.EVENTS_REPO }}
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build & Push (events-service)
        uses: docker/build-push-action@v5
        with:
          context: ./src/microservices/events
          dockerfile: Dockerfile   # если у тебя файл называется "dockerfile" — поменяй
          push: true
          tags: ${{ steps.meta-events.outputs.tags }}
          labels: ${{ steps.meta-events.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ===== API TESTS через compose.ci =====
      - name: Set up Node for tests
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Compose Up (infra for tests)
        run: |
          docker compose -f docker-compose.ci.yml up -d
          echo "Wait for services to be ready..."
          sleep 25
          docker ps
          docker compose -f docker-compose.ci.yml logs --no-color || true

      - name: Install test deps
        working-directory: ./tests/postman
        run: npm ci

      - name: Run API tests
        working-directory: ./tests/postman
        env:
          BASE_URL: http://localhost:8000
        run: npm run test:docker

      - name: Compose Down
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v
