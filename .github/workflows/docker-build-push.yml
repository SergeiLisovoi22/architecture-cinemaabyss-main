name: Docker Build, Push & API Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docker-compose.ci.yml'
      - '.github/workflows/docker-build-push.yml'
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      REGISTRY: ghcr.io
      # включаем BuildKit + проксируем сборку через docker-cli для compose
      DOCKER_BUILDKIT: '1'
      COMPOSE_DOCKER_CLI_BUILD: '1'
      # наш compose-файл для CI
      COMPOSE_FILE: docker-compose.ci.yml

    steps:
      # 1) Чекаут основного репозитория (monorepo)
      - name: Checkout monorepo
        uses: actions/checkout@v4

      # 2) Чекаут внешнего репо proxy -> в _ext/proxy
      - name: Checkout proxy-service repo
        uses: actions/checkout@v4
        with:
          repository: SergeiLisovoi22/cinemaabyss-proxy-service
          # Если рабочая ветка — dev, поставь dev
          ref: main
          path: _ext/proxy

      # 3) Чекаут внешнего репо events -> в _ext/events
      - name: Checkout events-service repo
        uses: actions/checkout@v4
        with:
          repository: SergeiLisovoi22/events-service
          # Если рабочая ветка — dev, поставь dev
          ref: main
          path: _ext/events

      # 4) Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5) Логин в GHCR (используем PAT: GHCR_PAT)
      #    Создай в Settings → Secrets and variables → Actions секрет GHCR_PAT
      #    (PAT classic с правами read:packages, write:packages, repo)
      - name: Log in to GHCR (with PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # 6) Сборка всех образов по docker-compose.ci.yml
      - name: Docker compose build
        run: docker compose -f "${{ env.COMPOSE_FILE }}" build --pull

      # 7) Публикация образов в GHCR
      - name: Docker compose push
        run: docker compose -f "${{ env.COMPOSE_FILE }}" push

      # --- (опционально) можно здесь запускать api-tests, если нужно ---
      # - name: API tests (optional)
      #   run: |
      #     npm ci --prefix tests/postman
      #     npm run test:ci --prefix tests/postman
