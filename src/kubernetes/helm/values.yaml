# ======================================
# values.yaml for cinemaabyss Helm chart
# ======================================

global:
  namespace: cinemaabyss
  domain: cinemaabyss.example.com

# --- Docker auth secret (как в проекте)
imagePullSecrets:
  dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7ImF1dGgiOiJjMlZ5WjJWcGJHbHpiM1p2YVRJeU9tZG9jRjlVYm5GeFJGazVZa0ZvZW1WVFRtMTBORVpsZFhwM2QwZFhOMUo0VUUwd1RYaENNV3M9In19fQ==

# ======================
# PostgreSQL
# ======================
postgres:
  enabled: true
  image:
    repository: postgres
    tag: "15"
    pullPolicy: IfNotPresent
  persistence:
    enabled: true
    size: 1Gi
  service:
    port: 5432
    type: ClusterIP
  env:
    POSTGRES_DB: cinema
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres

# ======================
# ZooKeeper
# ======================
zookeeper:
  enabled: true
  image:
    repository: bitnami/zookeeper
    tag: 3.9.1
    pullPolicy: IfNotPresent
  replicas: 1
  service:
    port: 2181
    type: ClusterIP
  env:
    ALLOW_ANONYMOUS_LOGIN: "yes"

# ======================
# Kafka
# ======================
kafka:
  enabled: true
  image:
    repository: bitnami/kafka
    tag: 3.7.0
    pullPolicy: IfNotPresent
  replicas: 1
  service:
    port: 9092
    type: ClusterIP
  env:
    KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    ALLOW_PLAINTEXT_LISTENER: "yes"

# ======================
# Monolith (если нужен для заданий)
# ======================
monolith:
  enabled: true
  image:
    repository: ghcr.io/sergeilisovoi22/db-exp/cinemaabysstest/monolith
  tag: latest
  pullPolicy: Always
  replicas: 1
  service:
    port: 8080
    targetPort: 8080
    type: ClusterIP

# ======================
# Proxy-service
# ======================
proxyService:
  enabled: true
  image:
    repository: ghcr.io/sergeilisovoi22/cinemaabyss-proxy-service
    tag: latest
    pullPolicy: Always
  replicas: 1
  env:
    - name: MOVIES_BASE_URL
      value: http://movies-service:8081
    - name: MOVIES_SERVICE_URL
      value: http://movies-service:8081
    - name: MOVIES_API_BASE_URL
      value: http://movies-service:8081
  service:
    port: 80
    targetPort: 8000
    type: ClusterIP

# ======================
# Movies-service
# ======================
moviesService:
  enabled: true
  image:
    repository: ghcr.io/sergeilisovoi22/db-exp/cinemaabysstest/movies-service
    tag: latest
    pullPolicy: Always
  replicas: 1
  service:
    port: 8081
    targetPort: 8081
    type: ClusterIP

# ======================
# Events-service
# ======================
eventsService:
  enabled: true
  image:
    repository: ghcr.io/sergeilisovoi22/events-service
    tag: latest
    pullPolicy: Always
  replicas: 1
  env:
    - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
      value: kafka:9092
    - name: SERVER_ERROR_INCLUDE_MESSAGE
      value: always
    - name: SERVER_ERROR_INCLUDE_STACKTRACE
      value: always
    - name: SERVER_ERROR_INCLUDE_BINDING_ERRORS
      value: always
  service:
    port: 8082
    targetPort: 8082
    type: ClusterIP

# ======================
# Ingress (единый, без rewrite и без /api/events)
# ======================
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: cinemaabyss.example.com
      paths:
        - path: /
          pathType: Prefix
          service: proxy-service
          port: 80
        - path: /api/movies
          pathType: Prefix
          service: proxy-service
          port: 80
        # Для событий используем фактический маршрут сервиса:
        - path: /api/events/health
          pathType: Prefix
          service: events-service
          port: 8082

# ======================
# ServiceAccount / ресурсы / размещение (по умолчанию)
# ======================
serviceAccount:
  create: true
  name: ""
resources: {}
tolerations: []
nodeSelector: {}
affinity: {}
